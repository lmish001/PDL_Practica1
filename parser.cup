/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
  Float mem = (float)0;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            	SEMI, PLUS, MINUS, UMINUS, TIMES, DIVIDEBY, LPAREN, RPAREN, EXP, LOG, SIN, COS, EQ;
terminal Integer    	INT_NUMBER;       
terminal Float 			DEC_NUMBER, MEM;
/* Non terminals */
non terminal            expr_list,par_neg, impar_neg, plus;
non terminal Integer    e_int, t_int, f_int, p_int;      // used to store evaluated subexpressions
non terminal Float 		e_float, t_float, f_float, p_float;

/* Precedences 
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;
*/


/* The grammar rules */
expr_list 	::= expr_list e_int:e SEMI			{: System.out.println(e); :}
				| e_int:e SEMI					{: System.out.println(e); :}
				| expr_list e_float:e SEMI		{: System.out.println(e); :}
				| e_float:e SEMI				{: System.out.println(e); :}
				| MEM EQ e_int:e SEMI			{: System.out.println("MEM = "+e);mem = (float)e; :}
				| MEM EQ e_float:e SEMI 		{: System.out.println("MEM = "+e);mem = (float)e; :}
				| expr_list MEM EQ e_int:e SEMI	{: System.out.println("MEM = "+e);mem = (float)e; :}
				| expr_list MEM EQ e_float:e SEMI{: System.out.println("MEM = "+e);mem = (float)e; :}
				;
/*integer*/
e_int 		::=	e_int:e1 PLUS t_int:e2			{: RESULT = e1+e2;        :}
				| e_int:e1 MINUS t_int:e2		{: RESULT = e1-e2;        :}
				| t_int:e1						{: RESULT = e1;        	:}
				;
				
t_int 		::= t_int:e1 TIMES f_int:e2 		{: RESULT = e1*e2;        :}
				| f_int:e1						{: RESULT = e1;        :}
				;
				
f_int 		::= par_neg INT_NUMBER:e1			{: RESULT = e1;        :}
				| impar_neg INT_NUMBER:e1		{: RESULT = -e1;       :}
				| par_neg p_int:e1				{: RESULT = e1;        :}
				| impar_neg p_int:e1			{: RESULT = -e1;       :}
				| INT_NUMBER:e1					{: RESULT = e1;        :}
				| p_int:e1						{: RESULT = e1;        :}
				;
		
p_int 		::= LPAREN e_int:e1 RPAREN			{: RESULT = e1;        :}
				;
/*float*/
e_float 		::=	e_float:e1 PLUS t_float:e2	{: RESULT = e1+e2;        :}
				| e_float:e1 MINUS t_float:e2	{: RESULT = e1-e2;        :}
				| e_float:e1 PLUS t_int:e2		{: RESULT = e1+e2;        :}
				| e_float:e1 MINUS t_int:e2		{: RESULT = e1-e2;        :}
				| e_int:e1 PLUS t_float:e2		{: RESULT = e1+e2;        :}
				| e_int:e1 MINUS t_float:e2		{: RESULT = e1-e2;        :}
				| t_float:e1					{: RESULT = e1;        	:}
				;
				
t_float 		::= t_float:e1 TIMES f_float:e2 {: RESULT = e1*e2;        :}
				| t_float:e1 DIVIDEBY f_float:e2{: RESULT = e1/e2;        :}
				| t_float:e1 TIMES f_int:e2 	{: RESULT = e1*e2;        :}
				| t_float:e1 DIVIDEBY f_int:e2	{: RESULT = e1/e2;        :}
				| t_int:e1 TIMES f_float:e2 	{: RESULT = e1*e2;        :}
				| t_int:e1 DIVIDEBY f_float:e2	{: RESULT = e1/e2;        :}
				| t_int:e1 DIVIDEBY f_int:e2	{: RESULT = e1.floatValue()/e2.floatValue();        :}
				| f_float:e1					{: RESULT = e1;        :}
				;
				
f_float 		::=  par_neg DEC_NUMBER:e1		{: RESULT = e1;        :}
				| impar_neg DEC_NUMBER:e1		{: RESULT = -e1;        :}
				| par_neg  p_float:e1			{: RESULT = e1;        :}
				| impar_neg  p_float:e1			{: RESULT = -e1;        :}
				| DEC_NUMBER:e1					{: RESULT = e1;        :}
				| par_neg MEM:e1				{: RESULT = mem;    :}
				| impar_neg MEM:e1				{: RESULT = -mem;        :}
				| MEM:e1						{: RESULT = mem;        :}
				| p_float:e1					{: RESULT = e1;        :}
				;
				
p_float 		::= LPAREN e_float:e1 RPAREN	{: RESULT = e1;        :}
				| EXP LPAREN e_float:e1 RPAREN	{: RESULT = (float)Math.exp(e1);        :}
				| LOG LPAREN e_float:e1 RPAREN	{: RESULT = (float)Math.log(e1);        :}
				| SIN LPAREN e_float:e1 RPAREN	{: RESULT = (float)Math.sin(e1);        :}
				| COS LPAREN e_float:e1 RPAREN	{: RESULT = (float)Math.cos(e1);        :}
				| EXP LPAREN e_int:e1 RPAREN	{: RESULT = (float)Math.exp(e1);        :}
				| LOG LPAREN e_int:e1 RPAREN	{: RESULT = (float)Math.log(e1);        :}
				| SIN LPAREN e_int:e1 RPAREN	{: RESULT = (float)Math.sin(e1);        :}
				| COS LPAREN e_int:e1 RPAREN	{: RESULT = (float)Math.cos(e1);        :}
				;  
				
//sustitucion de uminus				      
par_neg 		::= MINUS MINUS
				| par_neg MINUS MINUS
				| PLUS
				| par_neg PLUS
				| MINUS plus MINUS
				| par_neg MINUS plus MINUS
				;
				
impar_neg		::= MINUS
				| MINUS plus
				| par_neg MINUS
				| par_neg MINUS plus					
				;					   
				
plus 			::= plus PLUS
				| PLUS
				;				